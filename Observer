# Padrão Projeto Observer

Os Padrões de Projetos nos permitem reutilizar a experiência de outros desenvolvedores que tiveram problemas semelhantes e os solucionaram. Também fornecem um vocabulário compartilhado com outros desenvolvedores. Quando temos um vocabulário, podemos nos comunicar muito mais facilmente com outros desenvolvedores e inspirar aqueles que não conhecem os padrões a começarem a aprendê-los. 
Quando se comunicamos com as nossas equipes usando simplesmente o nome de um padrão de projeto estamos automaticamente comunicando não apenas o nome de um padrão, mas sim um conjunto de qualidades, características e restrições que o padrão representa. Usando simplesmente o nome do padrão já comunicamos o design que temos em mente para uma determinada tarefa, além disso, não precisamos entrar em detalhes falando o que a classe faz, como se relaciona, com quem, etc, o padrão já deixa clara a ideia de como será feito, assim podemos nos comunicar mais rapidamente e com menos espaços para mal-entendidos.

#### Aplicabilidade
O padrão Observer pode ser usado quando uma abstração tem dois aspectos, um dependente do outro. Encapsular tais aspectos em objetos separados permite que variem e sejam reusados separadamente. Quando uma mudança a um objeto requer mudanças a outros e você não sabe quantos outros objetos devem mudar ou quando um objeto deve ser capaz de avisar outros sem fazer suposições sobre quem são os objetos. Em outras palavras, sem criar um acoplamento forte entre os objetos.

#### Conseqüências
Possibilita baixo acoplamento entre os objetos dependentes (os observers) e o assunto.
Acoplamento abstrato.
Suporte para broadcast.
Dificuldade em saber o que foi mudado

Exemplo de como deve ser uma estrutura Observer:

![Estrutura](https://github.com/Felipecasadia/Estudos/blob/master/Observer/Observer.png)

Exemplo de um código em java:

[Link do exemplo](https://github.com/Felipecasadia/Estudos/tree/master/Observer/Exemplo%20Java)

